# Resumen Materia Principios de Lenguajes de Programacion

## Unidad 1 
```
bibliografia:
    Programming Languages: Design and Implementation - Pratt,Terrance
        Cap 1 y 2 
    Concepts of Programming Languages - Sebesta, Robert
        Cap 1 y 2 
```

### Que es un lenguaje en general?
- Es un medio del que se vale cualquier individuo para comunicar ideas y experiencias a otros individuos.
- (Ideas) Estan almacenadas en el individuo emisor y almacenadas tal vez con otra representacion en el receptor.

### Que es un lenguaje de programacion?
1. Cualquier notacion para la descripcion de algoritmos y estructuras de datos (inplementadas en una computadora).
2. Un sistema notacional formal usado para expresar procesos computacionales, con una sitaxis bien definida y una semantica asociada.
3. Es el puente que une las ideas de humanos con receptores, en este caso computadoras. (modelo sematico humano <--> modelo computacional).

Un **lenguaje de programacion** es: 
- Un **sistema notacional** para describir **computaciones** de una forma **legible** tanto para la **maquina** como compresible para el **ser humano** 


#### Que es programar? 
- Planter una solucion a un problema mediante un **Paradigma de Programacion** 
- Un **Lenguaje de Programacion** es la herramienta que permite **expresar** nuestra solucion.

### Porque estudiar un lenguaje de programacion?

- Para mejorar nuestra habilidad de desarrollar algoritmos efectivos
- Para mejorar nuestro uso dentro de un lenguaje de programacion existente
- Para incrementar nuestro vocabulario de sintaxis utiles
- Para permitirnos una mejor opcion de lenguaje de programacion
- Para facilitarnos el aprendizaje de un nuevo lenguaje
- Para facilitarnos a la hora de diseniar un nuevo lenguaje

### Historia

Lenguajes basados en numeros -> Lenguajes de negocios -> Lenguajes de Inteligencia Artificial -> Lenguajes de Sistemas
(Algol, FORTRAN) -> (CBL, COBOL) -> (LISP, MIT) -> (CPL, C)

Los lenguajes de programacion fueron siendo actualizados o cambiando gracias a: 
    1. Avances de HW (De tubos a supercomputadoras y microprocesadores)
    2. Aplicaciones (Los requerimientos de las nuevas aplicaciones afectaron los disenios de nuevos lenguajes)
    3. Metodos de programacion (Metodologias SOLID y la manera de escribir codigo de calidad)
    4. Implementacion de Metodos
    5. Estudios teoricos (Metodos matematicos formales expandieron nuestro conocimiento y entendimiento de las features de lenguajes)
    6. Estandarizacion 

### Porque aparecen lenguajes nuevos? 
- Evolucion
- Proposito especial
- Preferencia personal

El **Lenguaje de programacion** surge de la **vinculacion** entre las diferentes **metodologias de disenio** y las **arquitecturas** de las computadoras.

Otro de los factores que terminan teniendo especial relevacia es el **dominio de aplicacion** pretendido.

#### Que convierte a un lenguaje en exitoso?
- Poder expresivo
- Baja curva de aprendizaje
- Facilidad de Implementacion
- Codigo abierto
- Excelentes compiladores
- Inercia, economia, quien lo promueve

### Atributos que hacen a un lenguaje uno "bueno"? 

1. Claridad, simplicidad y unidad 
2. Ortogonalidad
3. Naturalidad para la aplicacion -> Sintaxis clara, proveer estructuras de datos apropiadas, operaciones, estructuras de control y sintaxis natural para el problema a resolver
4. Soportar abstraccion
5. Facilidad a la hora de verificar el programa -> Testeo
6. Entorno de programacion -> Documentacion clara, editores especiales y paquetes de testeo, facilidad para mantener multiples versiones de un programa 
7. Portabilidad de programas -> Facilidad a la hora de trasladar el programa de una plataforma a otra
8. Costo de uso: 
    - Costo de ejecucion del programa -> optimizacion de compiladores, alocacion eficiente de registros, etc. 
    - Costo de traduccion de un programa -> compilacion eficiente, ya que a la hora de construir un SW se compila varias veces
    - Costo de creacion, testeo y uso de un programa 
    - Costo de mantencion del programa

### Criterio de evaluacion de los lenguajes (Lo que esta arriba)
- **Readability (Legibilidad)**: La facilidad con la que se pueden leer y comprender los programas.
- **Writability (Escribibilidad)**: La facilidad con la cual un lenguaje puede usarse para crear programas.
- **Realiability (Fiabilidad)**: ajuste a las especificaciones (cumple las especificaciones).
- **Costo**: los costos asociados.

Caracteristicas que influyen los criterios: 
- Simplicidad (LEC)
- Ortoganilidad (LEC)
- TD - Disenio de sintaxis (LEC)
- Soporte para la abstraccion (EC)
- Expresividad (EC)
- Chequeo de tipos (C)
- Manejo de excepciones (C)
- Aliasing (Alias) (C)

#### Legibilidad
Caracteristicas: 
- **Ortoganilidad:** Basicamente significa que un conjunto pequenio de constructores primitivos, puede ser comibnado en numero relativamente pequenio a la hora de construir estructuras de control y datos. Cada combinacion es legal y con sentido.
    - Mas facil de aprender y leer 
    - Conjunto pequenio de constructores primitivos para combinar de pocas maneras
    - Todas las comibnaciones son validas
    - Sin ortoganilidad aparecen excepciones a reglas
- **Definicion de tipos de datos y estructuras:** Contar con estructuras legibles (solo uso de goto - agregado del tipo boolean)Ej: Bandera = 1 o Bandera = true
- **Aspectos sintacticos:** Formas de los identificadores - palabras reservadas - forma y significado: constructores autodescriptivos, palabras claves significativas

#### Escribibilidad 
- **Simplicidad y ortoganilidad**: Pocos constructores, pequenio numero de primitivas, conjunto pequenio de reglas para combinar que sean ortogonales es mejor. Mucha ortogonalidad genera una menor deteccion de errores. Si el lenguaje no es simple solo se aprende y utiliza una pequenia porcion de el.
- **Capacidad de abstraccion**: Capacidad de definir y usar estructuras u operaciones complicadas de manera que sea posible ignorar muchos de los detalles.
- **Expresividad**: El lenguaje posee formas relativamente convenientes de expresar ciertas operaciones, por ejemplo **contador++** en lugar de **contador = contador + 1 ** o el uso del for en lugar del while equivalente. 

#### Fiabilidad 
- **Chequeo de tipos:** Control de errores de tipos
- **Manejo de excepciones:** Interceptar errores en tiempo de ejecicion y realizar posibles correcciones.
- **Aliasing:** Tener dos o mas nombres para acceder a una memoria
- **Legibilidad y escribilidad:** Si no existe metodo *natural* de expresar algoritmos requiere aproximaciones *poco naturales* 

#### Costo 
- Aprender 
- Usar 
- Compilacion
- Ejecucion
- Sistema de implementacion del lenguaje
- Disponibilidad
- Confiabilidad
- Mantenimiento
- Licencias

### Influencia en el disenio de los Lenguajes de Programacion
    - **Arquitectura de las computadoras:** Los lenguajes se desarrollan alrededor de las arquitectura prevalentes.
    - **Metodologias de Programacion:** Las nuevas metodologias de desarrollo de software guian los nuevos paradigmas de programacion, y por ende, los nuevos lenguajes de programacion

### Estandarizacion de Lenguajes 
- Estandards propietarios -> Definiciones hechas por la compania que desarollo el lenguaje.
- Estandards de consenso -> Son documentos producidos por organizaciones basados en la aceptacion de participantes relevantes

Para estandarizar un lenguaje efectivamente se necesitan resolver 3 problemas: 
    - Cuando se va a estandarizar el lenguaje?
    - Que significa para un programa aderirse a un estandar o para un compilador compilar un estandar? 
    - Cuando un estandar se pone viejo o cuando necesita ser modificado?

### Clasificacion de lenguajes
- Dominio de aplicacion:
    - Aplicaciones Cientificas (**Eficiencia**)
        - Gran cantidad de computos sobre grandes numeros en punto flotante
        - **FORTRAN** 
    - Aplicaciones de Negrocios (**Portabilidad**)
        - Gran produccion de reportes, manejos de numeros decimales y caracteres.
        - **COBOL** 
    - Inteligencia Artificial (**Complejidad**)
        - Manipulaicon de simbolos en lugar de manipulacion numerica
        - **LISP**
    - Programacion de Sistemas - Bases de Datos (**Seguridad**)
        - Busqueda de eficiencia (por uso continuo)
        - **Lenguajes ensambladores o C**
    - Software para la web (**Interoperabilidad**)
        - Coleccion eclectica de Lenguajes
        - **XHTML - PHP - JAVA**

### Abstraccion
    - **Nombres simbolicos** con restricciones
    - **Expresiones** mas cercanas a la realidad. Introduccion de los primeros chequeos: que exista la operacion, que los operandos sean accesisbles, etc.
    - **Subprogramas** pensandos solo como una forma de agrupar codigo
    - **Tipos de datos** 
        - Los simbolos se indexan variables de memoria con semantica, ya no hay locaciones de memoria anonimas
        - cada celda esta asociada a un tipo
        - Avanza el nivel de confiabilidad (chequeo y Seguridad)
        - Solo tipos de datos que proveia el lenguaje
        - En la siguiente generacion de lenguajes se extendio a tipos adecuados a diversas areas de aplicacion 
        - La siguiente generacion brinda pocos tipos primitivos; pero tambien mas constructores generales combinables entre si 

### Estructuras de control 
A **nivel instruccion: Programacion Estructurada**
- Hasta ahora habia secuencia y trasnferencia de control y venian ligadas a la arquitectura subyacente. La programacion estructurada propone utilizar: 
    1. Secuencia 
    2. Iteracion 
    3. Condicional
- En base a las estructuras de control surgen luego la ejecucion simetrica (o concurrente) y manejo de excepciones


A **nivel unidad: Disenio Top-Down** 
- Utilizacion de subprogramas para partir el problema en sub-problemas.
- Funcionalidad de la unidad: Para resolber sub-problemas
- Esquemas de relacion entre unidades
    - Jerarquico 
    - Simetrico
    - Paralelo
    - Latente

### Encapsulamiento
**Encapsular** -> Inicialmente tenienod en cuenta las acciones 
                -> Teniendo en cuenta datos 
- Para que el lenguaje sea bueno en abstraccion debe tener encapsulamiento y mecanismo para crear instancias
- Encapsulamiento sin abstraccion = agrupamiento sin ocultamiento

## Paradigma de los lenguajes de programacion 

Es una **coleccion de patrones conceptuales** (estructuras o reglas) que juntos **modelan el proceso de disenio** y que determinan en ultima instancia la **estructura de un programa**
- Un estilo de programacion
- Una manera de visualizar la ejecucion 
- Una forma de resolver problemas de programacion 
- Un enfoque, una perspectiva, una filosofia sobre como programar

Los 4 principales paradigmas: 
    - **Imperativo o procedural** [Pascal, Fortran, C]
    - **Orientado a Objetos** [Smalltalk, Java]
    - **Funcional** [Haskel, Lisp, ML]
    - **Logico** [Prolog, F-Prolog]
    - **Multiparadigma** JavaScript

### Paradigma Imperativo
Un programa es una secuencia de **instrucciones** que indican el flujo de la ejecucion.
(instruccion)***Senial dada para que se realice el cambio de estado del automata***


Las principales caracteristicas son: 
    1. Ejecucion secuencial de instrucciones
    2. Uso de variables represntando calores de locaciones de memoria
    3. Uso de sentencias de asignacion para cambiar los valores de las variables, permitiendo asi al programa operar sobre las locaciones de memoria


Se busca estructurar el control realizando una programacion estructurada y modular con abstraccion de datos para fomentar la reusabilidad y extendibilidad.

Los programas se construyen siguiendo una aproximacion:
    - Top-Down
    - Modular 

### Paradigma Orientado a Objetos 
- Se caracteriza por reconocer las entidades del problema (similar a la abstraccion de datos) 
- Caracterizado por atributos y comportamiento (de acuerdo a su proposito y habilidades)
- Entidad = ***Objetos*** 
- Comunicaion por **mensajes**, diferentes a la semantica de llamadas a procedimiento

Busca mejorar los siguientes aspectos del software
    - **Reusabilidad** 
    - **Extendibilidad**

### Paradigma Logico 
Basado en logica de primer orden (lenguaje preciso para expresar conocimiento) **Prolog** 


Los fundamentos del paradigma son: 
    - Deducir consecuencias a partir de premisas
    - Estudiar o decidir el valor de verdad de una sentencia a partir del valor de verdad de otras
    - Establecer la consistencia entre hechos y verificar la validez de argumentos


Caracteristicas de los lenguajes logicos
    - Eliminacion del control
    - El concepto de variable es mas matematico, son nombres que retienen valores 
    - Establecen *que* es lo que se debe hacer sin dar ninguna especificacion sobre el *como* hacerlo 


Caracteristicas de los programas logicos 
    - Conjuntos de axiomas que establecen relaciones
    - Definen un conjunto de consecuencias que determinan el significado
    - Son teoremas y la ejecucion es una prueba automatica

### Paradigma funcional 
La esencia de esta metodologia esta en componer funciones para definir otras mas complejas.

**Funcion**: 
    - **Regla** que mapea un valor del dominio en uno correspondiente al rango
    - Requiere establecer una **signatura** y una **regla de mapeo** 
    - En la definicion se establecen los parametros.
      En la aplicacion se habla de argumentos 
      El retorno de la funcion provee el resultado


Caracteristicas de los lenguajes funcionales
    - Define un conjunto de datos
    - Provee un conjunto de funciones primitivas 
    - Provee un conjunto de formas funcionales 
    - Requiere de un operador de aplicacion 

Caracteristicas de los programas funcionales 
    - Semantica basada en valores 
    - Transparencia referencial
    - Regla de mapeo basada en combinacion o composicion
    - Las funciones son *ciudadanos* de primer orden

## Metodos de implementacion
    
Cosas a tener en cuenta cuando diseniamos un Lenguaje de programacion
    - **Donde se ejecutaran los programas** o la computadora subyacente
    - **Modelo de ejecucion** o computadora virtual que soporta el lenguaje en el HW real 
    - **Metodologia de programacion** que es el modelo computacional que implementa el lenguaje 

Los lenguajes imperativos son los mas dominantes (por la influencia de arquitecturas de computadoras)
    - Datos y programas almacenados en la memoria
    - La memoria esta separada del CPU 
    - Instrucciones y datos se conectan en la memoria al CPU 
    - Bases para lenguajes imperativos 
        - Celdas de memoria - variables 
        - Sentencias de asignacion 
        - Iteracion es eficiente 

### Influencias de metodologias de programacion
| 50s - principios 60s     | finales 60s               | finales 70s                 | mediados 80s | 
| aplicaciones simples     | Programacion estructurada | O. a procesos -> O. a datos | POO          |
| Eficiencia de la maquina | Disenio top-down (divide y venceras) | ---------------- | ------------ | 


